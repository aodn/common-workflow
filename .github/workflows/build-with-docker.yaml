name: common_build_with_docker

# Please read this before continue https://lucamezzalira.com/2014/03/10/git-flow-vs-github-flow/
# then read this https://gitversion.net/docs/
#
# Expect the build runs given a docker file, a sample workflow to call this is like below:
# name: Test use common
#
# on:
#  push:
#    branches:
#      - feature/*
#      - master/*
#      - main/*
#
# jobs:
#  build-upload:
#    name: Build upload
#    uses: aodn/common-workflow/.github/workflows/build-with-docker.yaml@main
#    with:
#      artifact: ogcapi-java
#      tag: ''
#      docker_file: Docker.build
#      cmd: mvn -f ogc-api clean package
#      target: ogc-api/target/*.jar

on:
  workflow_call:
    inputs:
      cmd:
        description: 'The cmd to kick start the build in the docker environment. i.e. for maven mvn -f ogc-api clean package'
        type: string
        required: true
      docker_file:
        description: 'A dockerfile name, which create the build environment'
        type: string
        required: true
      artifact:
        description: 'The artifact name'
        required: true
        type: string
      version_method:
        description: 'How you want to version your artifact, manual or gitversion? Default is gitversion'
        required: false
        type: string
        default: 'gitversion'
      tag:
        description: 'The tag version to build and file name will include the tag name artifact-tag.ext, if no provide then HEAD is use and output file is artifact-SNAPSHOT.ext'
        required: false
        type: string
        default: ''
      target:
        description: 'Full path of output build file, i.e ogc-api/target/*.jar. File extension will be use to create the final upload name'
        required: true
        type: string
      keep_days:
        description: 'How long to keep the output file in github'
        required: false
        type: number
        default: 14

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Create docker container and build artifact
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ steps.gen_artifact_name.outputs.artifactVer }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0      # Must use this option else gitversion will fail

      - name: Install GitVersion
        if: ${{ inputs.version_method }} == 'gitversion'
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'
          preferLatestVersion: true

      - name: Install GitReleaseManager
        if: ${{ inputs.version_method }} == 'gitversion'
        uses: gittools/actions/gitreleasemanager/setup@v0
        with:
          versionSpec: '0.10.x'

      # https://github.com/GitTools/actions/blob/main/docs/examples/github/gitversion/execute/usage-examples.md
      - name: Determine Version
        if: ${{ inputs.version_method }} == 'gitversion'
        id: gitversion # id to later be referenced
        uses: gittools/actions/gitversion/execute@v0

      - name: Create artifact name
        id: 'gen_artifact_name'
        run: |
          artifact=${{ inputs.artifact }}
          filename=${{ inputs.target }}
          method=${{ inputs.version_method }}
          tag=${{ inputs.tag }}

          if [ "${method}" == 'gitversion' ]; then
            v="${artifact}-${{steps.gitversion.outputs.semVer}}.${filename##*.}";
          else
            v="${artifact}-${tag}.${filename##*.}";
          fi
          
          echo "artifactVer=${v}" >> $GITHUB_OUTPUT;
          echo "semVer=${{steps.gitversion.outputs.semVer}}" >> $GITHUB_OUTPUT;
          echo "fullSemVer=${{steps.gitversion.outputs.fullSemVer}}" >> $GITHUB_OUTPUT;

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker Image
        uses: docker/build-push-action@v4
        env:
          BUILDER_UID: ${{ runner.uid }}
        with:
          context: .
          file: ${{ inputs.docker_file }}
          load: true
          build-args: BUILDER_UID=${{ env.BUILDER_UID }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: ${{ inputs.artifact }}-build:latest

      - name: Run Pipeline Steps
        id: docker-build
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -v ${{ runner.home }}/.m2:/home/builder/.m2 \
            -v ${{ runner.home }}/.cache:/home/builder/.cachejournal/ \
            -v ${{ runner.home }}/bin:${HOME}/bin \
            -w /workspace \
            --entrypoint /bin/bash \
            ${{ inputs.artifact }}-build:latest -c '
            git reset --hard ${{ inputs.tag }}
            git clean --force --force -xd --exclude=web/node_modules
            ${{ inputs.cmd }}
          '

      - name: Upload artifact name ${{ steps.gen_artifact_name.outputs.artifactVer }}
        id: upload-artifact
        uses: actions/upload-artifact@v3
        with:
          name: "${{ steps.gen_artifact_name.outputs.artifactVer }}"
          path: ${{ inputs.target }}
          retention-days: ${{ inputs.keep_days }}        # Same as repo setting
          if-no-files-found: error                       # 'warn' or 'ignore' are also available, defaults to `warn`

      - name: Create tag
        uses: actions/github-script@v6
        with:
          script: |
            const branchName = context.payload.ref;
            const tagName = "${{ steps.gen_artifact_name.outputs.semVer }}";
            const method = "${{ inputs.version_method }}";
            
            if (method === 'gitversion' && (branchName === 'refs/heads/main' || branchName === 'refs/heads/master')) {
              
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tagName}`,
                sha: context.sha
              });

              console.log(`Tag '${tagName}' created and pushed successfully.`);
            } 
            else {
              console.log('Skipping tag creation as branch name is not main or master or verion_method is not gitversion');
            }